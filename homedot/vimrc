" OS
let s:is_win   = has('win32') || has('win64')
let s:is_mac   = has('mac') || system('uname') =~? '^darwin'
let s:is_linux = !s:is_mac && has('unix')

" filetype plugin indent on " Required for Neobundle
set nocompatible


" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')


" Vim libraries
Plug 'vim-jp/vital.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" C++ / Clang
Plug 'vim-jp/cpp-vim'
Plug 'Rip-Rip/clang_complete'
" Erlang / Elixir
Plug 'vim-erlang/vim-erlang-compiler'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/vim-erlang-runtime'
Plug 'elixir-lang/vim-elixir'
" Golang
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'mattn/vim-goimports'
" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'kchmck/vim-coffee-script'
Plug 'Quramy/tsuquyomi'
Plug 'leafgarland/typescript-vim'
" Lua
Plug 'xolox/vim-lua-ftplugin'
Plug 'xolox/vim-lua-inspect'
" Python
Plug 'nvie/vim-flake8'
Plug 'tell-k/vim-autopep8'
" Ruby / Rails
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'alpaca-tc/neorspec.vim'
Plug 'ngmy/vim-rubocop'
Plug 'tpope/vim-rbenv'
" Scala
Plug 'derekwyatt/vim-scala'
Plug 'jergason/scala.vim'
let g:scala_scaladoc_indent = 1
" Shader
Plug 'beyondmarc/hlsl.vim'
Plug 'tikhomirov/vim-glsl'
" Terraform
Plug 'hashivim/vim-terraform'
" Windows PowerShell
Plug 'PProvost/vim-ps1'

" Snippets
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

" Ctags
Plug 'szw/vim-tags'
Plug 'soramugi/auto-ctags.vim'
" RubyMotion
Plug 'rcyrus/snipmate-snippets-rubymotion'
" Groovy/Gradle
Plug 'tfnico/vim-gradle'
Plug 'xuhdev/indent-java.vim'
Plug 'tpope/vim-classpath'
" Git
Plug 'gregsexton/gitv'  " Gitk like
" Syntax check
Plug 'osyo-manga/vim-watchdogs'  "Async syntax checking.
Plug 'cohama/vim-hier'
Plug 'dannyob/quickfixstatus'
" Text object
Plug 'LeafCage/yankround.vim'
Plug 'h1mesuke/vim-alignta'
" Execute external command
Plug 'thinca/vim-quickrun'
Plug 'osyo-manga/shabadou.vim'

" plantuml
Plug 'aklt/plantuml-syntax'
" Stop making a file named like 'hello.txt]' (extra character at the end!).
Plug 'tyru/stoptypofile.vim'

" Other utilities
Plug 'xolox/vim-misc'  " Miscellaneous auto-load Vim scripts
Plug 'kana/vim-fakeclip' " Provide pseudo 'clipboard' registers ( for tmux )
Plug 'vim-scripts/surround.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'tpope/vim-fugitive'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-endwise'
Plug 'Lokaltog/vim-easymotion'
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
Plug 'elzr/vim-json'
Plug 'osyo-manga/vim-over'
Plug 'vim-scripts/grep.vim'
Plug 'scrooloose/nerdtree'
Plug 'itspriddle/vim-marked'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-dispatch'
Plug 'editorconfig/editorconfig-vim'
"Plug 'airblade/vim-rooter'
Plug 'kana/vim-operator-user'
Plug 'tyru/operator-camelize.vim'
Plug 'alpaca-tc/alpaca_tags'
Plug 'hail2u/vim-css3-syntax', {
      \ 'autoload' : {
      \   'filetypes' : ['css']
      \ }
      \}

" Joke
Plug 'mattn/webapi-vim'

" if_luaが有効ならneocompleteを使う
Plug has('lua') ? 'Shougo/neocomplete' : 'Shougo/neocomplcache'

" Unite and plugins
Plug 'Shougo/unite.vim'
Plug 'Shougo/neomru.vim'
Plug 'ujihisa/unite-colorscheme'
Plug 'h1mesuke/unite-outline'

" vimrc Benchmark
Plug 'mattn/benchvimrc-vim'

" Color schemes
Plug 'tomasr/molokai', { 'as': 'molokai' }
Plug 'dracula/vim', { 'as': 'dracula' }

" TextObject
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'      " rr:all blocks, ro:definitions, rl:loop, rc:control, rd:do for ruby blocks
Plug 'deris/vim-textobj-enclosedsyntax'    " aq, iq for treat enclosed syntax
Plug 'kana/vim-textobj-indent'             " al, il for indent block
Plug 'mattn/vim-textobj-url'               " au, iu for url
"Plug 'mjbrownie/html-textobjects'          " Html textobject
Plug 'osyo-manga/vim-textobj-multiblock'   " Unite (, [, { to ab, ib, and multiple block
Plug 'osyo-manga/vim-textobj-multitextobj' " To gather multiple textobject into one textobject

" misc
Plug 'deris/vim-duzzle'

" Non github repos
Plug 'git://git.wincent.com/command-t.git'

" Initialize plugin system
call plug#end()


"-------------------- Plugin settings --------------------
"--- json
let g:vim_json_syntax_conceal = 0
let g:vim_json_syntax_concealcursor = 1

"--- Alignta
xnoremap al :Alignta<Space>

"--- vim-over
nnoremap <silent> <Leader>m :OverCommandLine<CR>%s/

"--- paste
"" keymaps
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

"--- ruby
au FileType ruby,eruby setl tags+=~/.vim/tmp/rtags

"--- Neosnippet
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Keymaps
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" surround: t
"  e.g. visual mode -> St, ysst
let g:surround_116 = "{{ _('\r') }}"

" --- Registering LSP servers
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 0



"---------------------------------------------------------------------
"--- vim general settings
set ambiwidth=double
set backupdir=$HOME/.vim/tmp/
set backupskip=/tmp/*,/private/tmp/*
set directory=$HOME/.vim/tmp/
set viminfo+=n~/.vim/tmp/viminfo.txt
set browsedir=buffer
set expandtab
set hidden
set list
set listchars=tab:>\ ,extends:<
set number
set showmatch
set smartcase
set whichwrap=b,s,h,l,<,>,[,]
set autochdir

" Search
set incsearch
set ignorecase
set smartcase
set hlsearch
" Toggle highlighting by twice ESC
nnoremap <silent><Esc><Esc> :<C-u>set nohlsearch!<CR>

filetype on
set t_Co=256
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,cp932
set fileformats=unix,mac,dos
set ambiwidth=double
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
set re=1

" activate colorscheme
syntax enable
colorscheme dracula
" colorscheme molokai

" background transparent
hi Normal guibg=NONE ctermbg=NONE

" change comment color
highlight Comment ctermfg=darkcyan
highlight LineNr ctermfg=grey
" highlight LineNr ctermfg=grey ctermbg=grey

" change the leader key to the ";"
let mapleader = ";"
noremap \ ;

" copy to clipboard when yanked
set clipboard=unnamed

" 表示行単位で移動
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk

"These are to cancel the default behavior of c, C, s, p
"  to put the text they delete in the default register.
"  Note that this means e.g. "ad won't copy the text into
"  register a anymore.  You have to explicitly yank it.
nnoremap c "_c
vnoremap c "_c
nnoremap C "_C
vnoremap C "_C
nnoremap s "_s
vnoremap s "_s
xnoremap p "_dP

" Tag jump
nnoremap <Leader>h :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <Leader>k :split<CR> :exe("tjump ".expand('<cword>'))<CR>

" <C-g> show the full file path
nnoremap <C-g> 1<C-g>

" ctags display list if there are multiple search results
nnoremap <C-]> g<C-]>

" Change color on status line when input mode
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

" Indent width
if has("autocmd")
  "enable for search filetype
  filetype plugin on
  filetype indent on
  set smartindent
  set smarttab
  set tabstop=2 shiftwidth=2
  "sw=softtabstop, sts=shiftwidth, ts=tabstop, et=expandtab
  autocmd FileType c            setlocal sw=4 sts=4 ts=4 et
  autocmd FileType css          setlocal sw=4 sts=4 ts=4 et
  autocmd FileType go           setlocal sw=4 sts=4 ts=4 noet
  autocmd FileType html         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType html         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType javascript   setlocal sw=4 sts=4 ts=4 et
  autocmd FileType js           setlocal sw=4 sts=4 ts=4 et
  autocmd FileType json         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType python       setlocal sw=4 sts=4 ts=4 et
  autocmd FileType ruby         setlocal sw=2 sts=2 ts=2 et
  autocmd FileType sass         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType scala        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType scss         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType sh           setlocal sw=2 sts=2 ts=2 et
  autocmd FileType yaml         setlocal sw=2 sts=2 ts=2 et
  autocmd FileType yml          setlocal sw=2 sts=2 ts=2 et
  autocmd FileType zsh          setlocal sw=4 sts=4 ts=4 et
endif

" File type
autocmd BufNewFile,BufRead *\.shader set filetype=glsl
autocmd BufNewFile,BufRead Fastfile set filetype=ruby
autocmd BufNewFile,BufRead Matchfile set filetype=ruby
autocmd BufRead,BufNewFile *\.gs set filetype=javascript

" Python
" autocmd BufNewFile,BufRead *.py set tabstop=4 shiftwidth=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
""autopep8をbuffer write時に実行
function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction
function! Autopep8()
  if executable('autopep8')
    call Preserve(':silent %!autopep8 --ignore=E501 -')
  endif
endfunction
autocmd BufWrite *.py :call Autopep8()

" For conceal markers.
if has('conceal')
  setl conceallevel=0
endif

" Json formatting
command! -nargs=? Jq call s:Jq(<f-args>)
function! s:Jq(...)
    if 0 == a:0
        let l:arg = "."
    else
        let l:arg = a:1
    endif
    execute "%! jq \"" . l:arg . "\""
endfunction

" Highlight the trailing whitespace
augroup HighlightTrailingSpaces
  autocmd!
  autocmd VimEnter,WinEnter,ColorScheme * highlight TrailingSpaces term=underline guibg=Red ctermbg=Red
  autocmd VimEnter,WinEnter * match TrailingSpaces /\s\+$/
augroup END

" toggle CamelCase / snake_cake
map <leader>c <plug>(operator-camelize-toggle)
